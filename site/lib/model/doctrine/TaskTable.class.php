<?php

/**
 * TaskTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TaskTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object TaskTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Task');
    }

    /***
     * 
     */
    private function createQueryForReminderOnTime($nowTime = '', $userId = 0) {
        $query = Doctrine_Query::create()
                ->select('*')
                ->from('Task')
                ->where('is_deleted=0 AND completed_at IS NULL')
//                ->addWhere("DATE_FORMAT(created_at, '%Y/%m/%d') = ?", date('Y/m/d'))
                ->addWhere("(DATE_FORMAT(remind_1st_at, '%Y-%m-%d %H:%i') = ?)
                    OR (DATE_FORMAT(remind_2rd_at, '%Y-%m-%d %H:%i') = ?)
                    OR (DATE_FORMAT(remind_3th_at, '%Y-%m-%d %H:%i') = ?)", 
                        array($nowTime, $nowTime, $nowTime))
                ->orderBy('priority DESC')
        ;
        if($userId){
            $query->addWhere('user_id = ? OR follow_user_id = ?', array($userId, $userId));
        }
        return $query;
    }
    /***
     * 
     */
    public function findTaskNeedRemindedOnTime($nowTime, $userId = 0) {
        $query = $this->createQueryForReminderOnTime($nowTime, $userId);
        return $query->execute();
    }

    /***
     * 
     */
    public function countTaskNeedReminded($nowTime, $userId = 0) {
        $query = Doctrine_Query::create()
                ->select('*')
                ->from('Task')
                ->where('is_deleted=0 AND completed_at IS NULL')
                ->addWhere("(DATE_FORMAT(remind_1st_at, '%Y-%m-%d %H:%i') <= ? AND remind_2rd_at IS NULL)
                    OR (DATE_FORMAT(remind_2rd_at, '%Y-%m-%d %H:%i') <= ? AND remind_3th_at IS NULL)
                    OR (DATE_FORMAT(remind_3th_at, '%Y-%m-%d %H:%i') <= ?)", 
                        array($nowTime, $nowTime, $nowTime))
                ->orderBy('priority DESC')
        ;
        if($userId){
            $query->addWhere('user_id = ? OR follow_user_id = ?', array($userId, $userId));
        }
        
        return $query->count();
    }

    /***
     * Bao cao
     */
    public function getTaskReportingPager($page, $maxPerPage, $userName, $createdFrom, $createdTo, $taskStatus) {
        $class = 'Task';
        $query = Doctrine_Query::create()
                ->select('t.*, tc.*')
                ->from('Task t, t.User u, t.TaskComments tc')
                ->where('t.is_deleted = 0')
                ->orderBy('t.created_at DESC, priority')
        ;

        if ($userName) {
            $query->addWhere('(u.username LIKE ? OR concat(u.first_name, " ", u.last_name) LIKE ? OR concat(u.first_name, " ", u.last_name) LIKE ?)', 
                array("%$userName%", "%$userName%", "%$userName%"));
        }
        if($createdFrom){
            $query->addWhere('(t.created_at >= ?)', $createdFrom);
        }
        if($createdTo){
            $query->addWhere('(t.created_at <= ?)', $createdTo);
        }

        if($taskStatus == 0){ // Chua hoan thanh
            $query->addWhere('(t.completed_at IS NULL)');
        }else if($taskStatus == 1){ // Hoan thanh
            $query->addWhere('(t.completed_at IS NOT NULL)');
        }
        
        $pager = new sfDoctrinePager($class, $maxPerPage);
        $pager->setPage($page);
        $pager->setQuery($query);
        $pager->init();

        return $pager;
    }
}